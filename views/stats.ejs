<!DOCTYPE hmtl>

<html>

  <head>

    <!-- ZingChart CDN script -->
    <script src="https://cdn.zingchart.com/zingchart.min.js"></script>

    <style>
      #chart {
        height: 500px;
        width: 1000px;
      }
    </style>

  </head>

  <body>

    <h1>Stats</h1>
    <h2 id="index"><%=index%></h2>
    <h2 id="macAddress">MAC: <%=macAddress%></h2>
    <h2 id="description">Description: <%=description%></h2>
    <!-- EJS loop through employees returned from MongoDB -->
    <ul>

      <!-- inserts each employee name/age from MongoDB to list -->
      <% stats.forEach(stat => { %>

      <% }); %>

    </ul>

    <!-- chart container -->
    <div id="chart"></div>

    <!-- fetches data from api/data page & renders chart from data returned -->
    <script>
      // creates variable for url we want to fetch
      const index = document.getElementById("index").innerHTML
      const url = 'http://localhost:3000/stats/api/' + index;
      console.log(url)
      // fetch call to our /api/data page
      fetch(url)
        // creates promise to work with response from /api/data
        .then(res => {
          if (!res.ok) {
            throw new Error(res.statusText);
          }
          return res.json();
        })
        .then(data => {
          let stats = data;
          let statsInfo = [];
          stats.forEach(stat => {
            // pushes values from employees variable to empty employeeInfo array
            statsInfo.push([parseInt(stat.timestamp)*1000, parseInt(stat.difference)]);
          });
          // creates chart const with employeeInfo array
          const chart = {
            type: 'line',
            scaleX:{transform: {  
                type: 'date',  
                all: '%d/%m/%y  %h:%i %A'  
}           },
            series: [
              {
                values: statsInfo
              }
            ]
          };
          // renders zingchart to the page
          zingchart.render({
            id: 'chart',
            data: chart,
            height: '100%',
            width: '100%'
          });
        })
        // catches errors in promise chain
        .catch(error => console.log('fetch error' + error));
    </script>

  </body>

